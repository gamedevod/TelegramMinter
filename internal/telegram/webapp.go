package telegram

import (
	"context"
	"fmt"
	"log"
	"net/url"
	"regexp"
	"strings"
	"time"

	"stickersbot/internal/client"

	"github.com/gotd/td/tg"
)

// WebAppService —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Web App
type WebAppService struct {
	api         *tg.Client
	botUsername string             // –∏–º—è –±–æ—Ç–∞, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
	webAppURL   string             // URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	httpClient  *client.HTTPClient // HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
}

// NewWebAppService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å Web App
func NewWebAppService(api *tg.Client, botUsername, webAppURL string) *WebAppService {
	return &WebAppService{
		api:         api,
		botUsername: botUsername,
		webAppURL:   webAppURL,
		httpClient:  client.New(), // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π HTTP –∫–ª–∏–µ–Ω—Ç
	}
}

// GetBearerTokenFromWebApp –ø–æ–ª—É—á–∞–µ—Ç Bearer —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Web App
func (w *WebAppService) GetBearerTokenFromWebApp(ctx context.Context, userID int64) (string, error) {
	log.Printf("üåê –ó–∞–ø—Ä–æ—Å Bearer —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Web App –¥–ª—è –±–æ—Ç–∞: %s", w.botUsername)

	// 1. –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞
	bot, err := w.findBot(ctx)
	if err != nil {
		return "", fmt.Errorf("–ø–æ–∏—Å–∫ –±–æ—Ç–∞: %w", err)
	}

	// 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Web App
	webAppData, err := w.requestWebApp(ctx, bot, userID)
	if err != nil {
		return "", fmt.Errorf("–∑–∞–ø—Ä–æ—Å Web App: %w", err)
	}

	// 3. –ò–∑–≤–ª–µ–∫–∞–µ–º Bearer —Ç–æ–∫–µ–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö Web App
	token, err := w.extractBearerToken(webAppData)
	if err != nil {
		return "", fmt.Errorf("–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ Bearer —Ç–æ–∫–µ–Ω–∞: %w", err)
	}

	log.Printf("‚úÖ Bearer —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Web App: %s", maskToken(token))
	return token, nil
}

// GetBearerTokenFromBot –ø–æ–ª—É—á–∞–µ—Ç Bearer —Ç–æ–∫–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É
func (w *WebAppService) GetBearerTokenFromBot(ctx context.Context, userID int64) (string, error) {
	log.Printf("ü§ñ –ó–∞–ø—Ä–æ—Å Bearer —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É: %s", w.botUsername)

	// 1. –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞
	bot, err := w.findBot(ctx)
	if err != nil {
		return "", fmt.Errorf("–ø–æ–∏—Å–∫ –±–æ—Ç–∞: %w", err)
	}

	// 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ /token –±–æ—Ç—É
	token, err := w.sendTokenCommand(ctx, bot, userID)
	if err != nil {
		return "", fmt.Errorf("–æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É: %w", err)
	}

	log.Printf("‚úÖ Bearer —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –æ—Ç –±–æ—Ç–∞: %s", maskToken(token))
	return token, nil
}

// findBot –Ω–∞—Ö–æ–¥–∏—Ç –±–æ—Ç–∞ –ø–æ username
func (w *WebAppService) findBot(ctx context.Context) (*tg.User, error) {
	// –†–µ–∑–æ–ª–≤–∏–º username –±–æ—Ç–∞
	resolved, err := w.api.ContactsResolveUsername(ctx, &tg.ContactsResolveUsernameRequest{
		Username: w.botUsername,
	})
	if err != nil {
		return nil, fmt.Errorf("—Ä–µ–∑–æ–ª–≤ username %s: %w", w.botUsername, err)
	}

	// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–±–æ—Ç–∞
	for _, user := range resolved.Users {
		if u, ok := user.(*tg.User); ok && u.Bot {
			return u, nil
		}
	}

	return nil, fmt.Errorf("–±–æ—Ç %s –Ω–µ –Ω–∞–π–¥–µ–Ω", w.botUsername)
}

// requestWebApp –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Web App —É –±–æ—Ç–∞
func (w *WebAppService) requestWebApp(ctx context.Context, bot *tg.User, userID int64) (string, error) {
	// –°–æ–∑–¥–∞–µ–º input peer –¥–ª—è –±–æ—Ç–∞
	inputPeer := &tg.InputPeerUser{
		UserID:     bot.ID,
		AccessHash: bot.AccessHash,
	}

	// –°–æ–∑–¥–∞–µ–º input user –¥–ª—è –±–æ—Ç–∞
	inputUser := &tg.InputUser{
		UserID:     bot.ID,
		AccessHash: bot.AccessHash,
	}

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Web App
	webView, err := w.api.MessagesRequestWebView(ctx, &tg.MessagesRequestWebViewRequest{
		Peer:     inputPeer,
		Bot:      inputUser,
		URL:      w.webAppURL,
		Platform: "web",
	})
	if err != nil {
		return "", fmt.Errorf("–∑–∞–ø—Ä–æ—Å Web App: %w", err)
	}

	log.Printf("üîó Web App URL: %s", webView.URL)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ URL –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
	return webView.URL, nil
}

// sendTokenCommand –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
func (w *WebAppService) sendTokenCommand(ctx context.Context, bot *tg.User, userID int64) (string, error) {
	// –°–æ–∑–¥–∞–µ–º input peer –¥–ª—è –±–æ—Ç–∞
	inputPeer := &tg.InputPeerUser{
		UserID:     bot.ID,
		AccessHash: bot.AccessHash,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /token –∏–ª–∏ /start
	_, err := w.api.MessagesSendMessage(ctx, &tg.MessagesSendMessageRequest{
		Peer:    inputPeer,
		Message: "/token",
	})
	if err != nil {
		return "", fmt.Errorf("–æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: %w", err)
	}

	log.Printf("üì§ –ö–æ–º–∞–Ω–¥–∞ /token –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç—É")

	// –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞ (—ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	// –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
	time.Sleep(2 * time.Second)

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	messages, err := w.api.MessagesGetHistory(ctx, &tg.MessagesGetHistoryRequest{
		Peer:  inputPeer,
		Limit: 10,
	})
	if err != nil {
		return "", fmt.Errorf("–ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏: %w", err)
	}

	// –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
	if history, ok := messages.(*tg.MessagesMessages); ok {
		for _, msg := range history.Messages {
			if m, ok := msg.(*tg.Message); ok {
				token := extractTokenFromMessage(m.Message)
				if token != "" {
					return token, nil
				}
			}
		}
	}

	return "", fmt.Errorf("—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–∞—Ö –±–æ—Ç–∞")
}

// extractBearerToken –∏–∑–≤–ª–µ–∫–∞–µ—Ç Bearer —Ç–æ–∫–µ–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö Web App
func (w *WebAppService) extractBearerToken(webAppURL string) (string, error) {
	log.Printf("üîç –ê–Ω–∞–ª–∏–∑ Web App URL: %s", webAppURL)

	// –ü–∞—Ä—Å–∏–º URL –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	parsedURL, err := url.Parse(webAppURL)
	if err != nil {
		return "", fmt.Errorf("–ø–∞—Ä—Å–∏–Ω–≥ URL: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
	queryParams := parsedURL.Query()

	// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
	tokenParams := []string{"token", "auth_token", "bearer", "access_token", "jwt"}
	for _, param := range tokenParams {
		if token := queryParams.Get(param); token != "" {
			log.Printf("‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ %s", param)
			return token, nil
		}
	}

	// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ hash —á–∞—Å—Ç–∏ URL (–ø–æ—Å–ª–µ #)
	if fragment := parsedURL.Fragment; fragment != "" {
		if token := extractTokenFromFragment(fragment); token != "" {
			log.Printf("‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –≤–æ fragment")
			return token, nil
		}
	}

	// 3. –ò–∑–≤–ª–µ–∫–∞–µ–º tgWebAppData/initData –∏–∑ URL
	initData := queryParams.Get("tgWebAppData")
	if initData == "" {
		initData = queryParams.Get("initData")
	}

	if initData != "" {
		log.Printf("üîç –ù–∞–π–¥–µ–Ω initData, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
		return w.requestTokenWithInitData(initData)
	}

	// 4. –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Web App, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—ë
	if strings.Contains(webAppURL, "tgWebAppData=") || strings.Contains(webAppURL, "initData=") {
		return w.extractInitDataFromURL(webAppURL)
	}

	// 5. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∑–∞–ø—Ä–æ—Å –∫ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	return w.requestTokenFromWebAppAPI(webAppURL)
}

// extractInitDataFromURL –∏–∑–≤–ª–µ–∫–∞–µ—Ç initData –∏–∑ URL
func (w *WebAppService) extractInitDataFromURL(webAppURL string) (string, error) {
	// –ò—â–µ–º tgWebAppData –∏–ª–∏ initData –≤ URL
	re := regexp.MustCompile(`(?:tgWebAppData|initData)=([^&\s#]+)`)
	matches := re.FindStringSubmatch(webAppURL)

	if len(matches) < 2 {
		return "", fmt.Errorf("initData –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL")
	}

	initData, err := url.QueryUnescape(matches[1])
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è initData: %w", err)
	}

	log.Printf("üîç –ò–∑–≤–ª–µ—á–µ–Ω initData: %s...", initData[:min(50, len(initData))])

	return w.requestTokenWithInitData(initData)
}

// requestTokenWithInitData –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç initData –Ω–∞ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
func (w *WebAppService) requestTokenWithInitData(initData string) (string, error) {
	// –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–º—É API
	// –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç initData –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Bearer —Ç–æ–∫–µ–Ω

	log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ initData –Ω–∞ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

	/* –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:

	import "encoding/json"
	import "net/http"
	import "bytes"

	type InitDataRequest struct {
		InitData string `json:"init_data"`
	}

	type TokenResponse struct {
		Token string `json:"token"`
		Error string `json:"error,omitempty"`
	}

	reqBody := InitDataRequest{InitData: initData}
	jsonData, _ := json.Marshal(reqBody)

	resp, err := http.Post("https://your-api.com/auth/telegram-webapp",
		"application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("–∑–∞–ø—Ä–æ—Å –∫ API: %w", err)
	}
	defer resp.Body.Close()

	var tokenResp TokenResponse
	if err := json.NewDecoder(resp.Body).Decode(&tokenResp); err != nil {
		return "", fmt.Errorf("–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞: %w", err)
	}

	if tokenResp.Error != "" {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ API: %s", tokenResp.Error)
	}

	return tokenResp.Token, nil
	*/

	// –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - —Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ initData
	// –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –≤–∞—à–µ–≥–æ API!
	token := fmt.Sprintf("demo_token_%x", initData[:min(8, len(initData))])
	log.Printf("‚ö†Ô∏è  –î–ï–ú–û: –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω: %s", maskToken(token))
	log.Printf("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∞–ª–∏–∑—É–π—Ç–µ requestTokenWithInitData –¥–ª—è –≤–∞—à–µ–≥–æ API!")

	return token, nil
}

// requestTokenFromWebAppAPI –¥–µ–ª–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (w *WebAppService) requestTokenFromWebAppAPI(webAppURL string) (string, error) {
	// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω initData
	// –ú–æ–∂–µ—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞

	log.Printf("‚ö†Ô∏è  Web App URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç initData –∏–ª–∏ –ø—Ä—è–º–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: %s", webAppURL)
	log.Printf("‚ö†Ô∏è  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
	log.Printf("    1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å bot_username")
	log.Printf("    2. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç Web App")
	log.Printf("    3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å web_app_url –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

	return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–∫–µ–Ω –∏–∑ Web App URL")
}

// min –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// extractTokenFromFragment –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ fragment —á–∞—Å—Ç–∏ URL
func extractTokenFromFragment(fragment string) string {
	// –ü–∞—Ä—Å–∏–º fragment –∫–∞–∫ query string
	values, err := url.ParseQuery(fragment)
	if err != nil {
		return ""
	}

	tokenParams := []string{"token", "auth_token", "bearer", "access_token", "jwt"}
	for _, param := range tokenParams {
		if token := values.Get(param); token != "" {
			return token
		}
	}

	return ""
}

// extractTokenFromMessage –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
func extractTokenFromMessage(message string) string {
	// –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
	tokenPatterns := []string{
		`(?i)token[:\s]+([A-Za-z0-9_\-\.]+)`,
		`(?i)bearer[:\s]+([A-Za-z0-9_\-\.]+)`,
		`(?i)auth[:\s]+([A-Za-z0-9_\-\.]+)`,
		`([A-Za-z0-9_\-\.]{32,})`, // –î–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã)
	}

	for _, pattern := range tokenPatterns {
		re := regexp.MustCompile(pattern)
		matches := re.FindStringSubmatch(message)
		if len(matches) > 1 {
			return matches[1]
		}
	}

	return ""
}

// maskToken –º–∞—Å–∫–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func maskToken(token string) string {
	if len(token) <= 8 {
		return strings.Repeat("*", len(token))
	}
	return token[:4] + strings.Repeat("*", len(token)-8) + token[len(token)-4:]
}

// GetAuthData –ø–æ–ª—É—á–∞–µ—Ç auth data –∏–∑ Telegram Web App (–∞–Ω–∞–ª–æ–≥ Python —Ñ—É–Ω–∫—Ü–∏–∏)
func (w *WebAppService) GetAuthData(ctx context.Context, botTag, webAppURL string) (*client.TelegramAuthResponse, error) {
	log.Printf("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ auth data –¥–ª—è –±–æ—Ç–∞: %s", botTag)

	// 1. –ù–∞—Ö–æ–¥–∏–º –±–æ—Ç–∞
	bot, err := w.findBotByTag(ctx, botTag)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±–æ—Ç–∞: %v", err)
		return &client.TelegramAuthResponse{
			Status:      "ERROR",
			Description: "Bot not found",
			Data:        err,
		}, err
	}

	// 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Web App
	webAppData, err := w.requestWebAppData(ctx, bot, webAppURL)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Web App –¥–∞–Ω–Ω—ã—Ö: %v", err)
		return &client.TelegramAuthResponse{
			Status:      "ERROR",
			Description: "Failed to get Web App data",
			Data:        err,
		}, err
	}

	log.Printf("‚úÖ Auth data –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	return &client.TelegramAuthResponse{
		Status:      "SUCCESS",
		Description: "OK",
		Data:        webAppData,
	}, nil
}

// findBotByTag –Ω–∞—Ö–æ–¥–∏—Ç –±–æ—Ç–∞ –ø–æ tag (–∞–Ω–∞–ª–æ–≥ resolve_peer)
func (w *WebAppService) findBotByTag(ctx context.Context, botTag string) (*tg.User, error) {
	// –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
	botUsername := strings.TrimPrefix(botTag, "@")

	// –†–µ–∑–æ–ª–≤–∏–º username –±–æ—Ç–∞
	resolved, err := w.api.ContactsResolveUsername(ctx, &tg.ContactsResolveUsernameRequest{
		Username: botUsername,
	})
	if err != nil {
		return nil, fmt.Errorf("—Ä–µ–∑–æ–ª–≤ username %s: %w", botUsername, err)
	}

	// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–±–æ—Ç–∞
	for _, user := range resolved.Users {
		if u, ok := user.(*tg.User); ok && u.Bot {
			return u, nil
		}
	}

	return nil, fmt.Errorf("–±–æ—Ç %s –Ω–µ –Ω–∞–π–¥–µ–Ω", botTag)
}

// requestWebAppData –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Web App –¥–∞–Ω–Ω—ã–µ (–∞–Ω–∞–ª–æ–≥ RequestWebView)
func (w *WebAppService) requestWebAppData(ctx context.Context, bot *tg.User, webAppURL string) (*client.AuthData, error) {
	// –°–æ–∑–¥–∞–µ–º input peer –¥–ª—è –±–æ—Ç–∞
	inputPeer := &tg.InputPeerUser{
		UserID:     bot.ID,
		AccessHash: bot.AccessHash,
	}

	// –°–æ–∑–¥–∞–µ–º input user –¥–ª—è –±–æ—Ç–∞
	inputUser := &tg.InputUser{
		UserID:     bot.ID,
		AccessHash: bot.AccessHash,
	}

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Web App (–∞–Ω–∞–ª–æ–≥ RequestWebView –∏–∑ Python)
	webView, err := w.api.MessagesRequestWebView(ctx, &tg.MessagesRequestWebViewRequest{
		Peer:        inputPeer,
		Bot:         inputUser,
		URL:         webAppURL,
		Platform:    "android", // –∫–∞–∫ –≤ Python –∫–æ–¥–µ
		FromBotMenu: false,     // –∫–∞–∫ –≤ Python –∫–æ–¥–µ
	})
	if err != nil {
		return nil, fmt.Errorf("–∑–∞–ø—Ä–æ—Å Web App: %w", err)
	}

	log.Printf("üîó –ü–æ–ª—É—á–µ–Ω Web App URL: %s", webView.URL)

	// –ò–∑–≤–ª–µ–∫–∞–µ–º tgWebAppData –∏–∑ URL (–∫–∞–∫ –≤ Python)
	authDataString, err := w.extractTgWebAppData(webView.URL)
	if err != nil {
		return nil, fmt.Errorf("–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ tgWebAppData: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º AuthData —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è 45 –º–∏–Ω—É—Ç (–∫–∞–∫ –≤ Python)
	expTime := time.Now().Add(45 * time.Minute)
	authData := client.NewAuthData(authDataString, expTime)

	log.Printf("üìã Auth data –∏–∑–≤–ª–µ—á–µ–Ω, –∏—Å—Ç–µ–∫–∞–µ—Ç: %s", expTime.Format("15:04:05"))

	return authData, nil
}

// extractTgWebAppData –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç tgWebAppData (–∞–Ω–∞–ª–æ–≥ Python unquote)
func (w *WebAppService) extractTgWebAppData(webAppURL string) (string, error) {
	// –ò—â–µ–º tgWebAppData –≤ URL
	if !strings.Contains(webAppURL, "tgWebAppData=") {
		return "", fmt.Errorf("tgWebAppData –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL")
	}

	// –†–∞–∑–¥–µ–ª—è–µ–º URL –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å —Å tgWebAppData
	parts := strings.Split(webAppURL, "tgWebAppData=")
	if len(parts) < 2 {
		return "", fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL")
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
	tgWebAppData := strings.Split(parts[1], "&tgWebAppVersion")[0]

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL (–∞–Ω–∞–ª–æ–≥ Python unquote)
	decoded1, err := url.QueryUnescape(tgWebAppData)
	if err != nil {
		return "", fmt.Errorf("–ø–µ—Ä–≤–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: %w", err)
	}

	// –í—Ç–æ—Ä–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–∞–∫ –≤ Python - –¥–≤–æ–π–Ω–æ–π unquote)
	decoded2, err := url.QueryUnescape(decoded1)
	if err != nil {
		return "", fmt.Errorf("–≤—Ç–æ—Ä–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: %w", err)
	}

	log.Printf("üîì –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ auth data: %s...", decoded2[:min(50, len(decoded2))])

	return decoded2, nil
}
