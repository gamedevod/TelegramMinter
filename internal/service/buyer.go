package service

import (
	"context"
	"fmt"
	"sync"
	"time"

	"stickersbot/internal/client"
	"stickersbot/internal/config"
	"stickersbot/internal/types"
)

// BuyerService —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
type BuyerService struct {
	client     *client.HTTPClient
	config     *config.Config
	statistics *types.Statistics
	isRunning  bool
	cancel     context.CancelFunc
	mu         sync.RWMutex
	logChan    chan string
}

// NewBuyerService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏
func NewBuyerService(cfg *config.Config) *BuyerService {
	return &BuyerService{
		client:     client.New(),
		config:     cfg,
		statistics: &types.Statistics{},
		logChan:    make(chan string, 1000),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
func (bs *BuyerService) Start() error {
	bs.mu.Lock()
	defer bs.mu.Unlock()

	if bs.isRunning {
		return fmt.Errorf("—Å–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
	}

	if !bs.config.IsValid() {
		return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤")
	}

	ctx, cancel := context.WithCancel(context.Background())
	bs.cancel = cancel
	bs.isRunning = true

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	bs.statistics = &types.Statistics{
		StartTime: time.Now(),
	}

	bs.logChan <- "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–∫—É–ø–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤..."
	bs.logChan <- fmt.Sprintf("üìä –ü–æ—Ç–æ–∫–æ–≤: %d", bs.config.Threads)
	bs.logChan <- fmt.Sprintf("üéØ –ö–æ–ª–ª–µ–∫—Ü–∏—è: %d, –ü–µ—Ä—Å–æ–Ω–∞–∂: %d", bs.config.Collection, bs.config.Character)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
	var wg sync.WaitGroup
	for i := 0; i < bs.config.Threads; i++ {
		wg.Add(1)
		go bs.worker(ctx, &wg, i+1)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	go bs.updateStatistics(ctx)

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		wg.Wait()
		bs.mu.Lock()
		bs.isRunning = false
		bs.mu.Unlock()
		bs.logChan <- "‚úÖ –í—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
	}()

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏
func (bs *BuyerService) Stop() {
	bs.mu.Lock()
	defer bs.mu.Unlock()

	if !bs.isRunning {
		return
	}

	if bs.cancel != nil {
		bs.cancel()
	}
	bs.logChan <- "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤..."
}

// IsRunning –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞
func (bs *BuyerService) IsRunning() bool {
	bs.mu.RLock()
	defer bs.mu.RUnlock()
	return bs.isRunning
}

// GetStatistics –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (bs *BuyerService) GetStatistics() *types.Statistics {
	bs.mu.RLock()
	defer bs.mu.RUnlock()
	
	// –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	stats := *bs.statistics
	if bs.isRunning {
		stats.Duration = time.Since(stats.StartTime)
		if stats.Duration.Seconds() > 0 {
			stats.RequestsPerSec = float64(stats.TotalRequests) / stats.Duration.Seconds()
		}
	}
	return &stats
}

// GetLogChannel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
func (bs *BuyerService) GetLogChannel() <-chan string {
	return bs.logChan
}

// worker –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∫—É–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
func (bs *BuyerService) worker(ctx context.Context, wg *sync.WaitGroup, workerID int) {
	defer wg.Done()

	for {
		select {
		case <-ctx.Done():
			bs.logChan <- fmt.Sprintf("üîÑ –ü–æ—Ç–æ–∫ %d –∑–∞–≤–µ—Ä—à–µ–Ω", workerID)
			return
		default:
			bs.performBuy(workerID)
			time.Sleep(100 * time.Millisecond) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
		}
	}
}

// performBuy –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É
func (bs *BuyerService) performBuy(workerID int) {
	bs.mu.Lock()
	bs.statistics.TotalRequests++
	bs.mu.Unlock()

	resp, err := bs.client.BuyStickers(
		bs.config.AuthToken,
		bs.config.Collection,
		bs.config.Character,
		bs.config.Currency,
		bs.config.Count,
	)
	
	if err != nil {
		bs.mu.Lock()
		bs.statistics.FailedRequests++
		bs.mu.Unlock()
		
		bs.logChan <- fmt.Sprintf("‚ùå –ü–æ—Ç–æ–∫ %d: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ - %v", workerID, err)
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
	bs.logChan <- fmt.Sprintf("üì° –ü–æ—Ç–æ–∫ %d: –°—Ç–∞—Ç—É—Å %d", workerID, resp.StatusCode)
	bs.logChan <- fmt.Sprintf("üìÑ –ü–æ—Ç–æ–∫ %d: –û—Ç–≤–µ—Ç - %s", workerID, resp.Body)

	if resp.IsTokenError {
		bs.mu.Lock()
		bs.statistics.FailedRequests++
		bs.statistics.InvalidTokens++
		bs.mu.Unlock()

		bs.logChan <- fmt.Sprintf("üîë –ü–æ—Ç–æ–∫ %d: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!", workerID)
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ç–æ–∫–µ–Ω–µ
		bs.Stop()
		return
	}

	if !resp.Success {
		bs.mu.Lock()
		bs.statistics.FailedRequests++
		bs.mu.Unlock()
		
		bs.logChan <- fmt.Sprintf("‚ö†Ô∏è –ü–æ—Ç–æ–∫ %d: –ù–µ—É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å (—Å—Ç–∞—Ç—É—Å %d)", workerID, resp.StatusCode)
	} else {
		bs.mu.Lock()
		bs.statistics.SuccessRequests++
		bs.mu.Unlock()
		
		bs.logChan <- fmt.Sprintf("‚úÖ –ü–æ—Ç–æ–∫ %d: –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å!", workerID)
	}
}

// updateStatistics –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
func (bs *BuyerService) updateStatistics(ctx context.Context) {
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return
		case <-ticker.C:
			stats := bs.GetStatistics()
			bs.logChan <- fmt.Sprintf("üìà –í—Å–µ–≥–æ: %d | –£—Å–ø–µ—à–Ω–æ: %d | –û—à–∏–±–æ–∫: %d | InvalidTokens: %d | RPS: %.1f | –í—Ä–µ–º—è: %s",
				stats.TotalRequests,
				stats.SuccessRequests,
				stats.FailedRequests,
				stats.InvalidTokens,
				stats.RequestsPerSec,
				stats.Duration.Truncate(time.Second),
			)
		}
	}
} 