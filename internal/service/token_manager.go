package service

import (
	"context"
	"fmt"
	"log"
	"strings"
	"sync"
	"time"

	"stickersbot/internal/client"
	"stickersbot/internal/config"
	"stickersbot/internal/telegram"
)

// TokenInfo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
type TokenInfo struct {
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
	IsValid   bool      `json:"is_valid"`
	LastCheck time.Time `json:"last_check"`
}

// TokenManager —É–ø—Ä–∞–≤–ª—è–µ—Ç Bearer —Ç–æ–∫–µ–Ω–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
type TokenManager struct {
	config      *config.Config
	httpClient  *client.HTTPClient
	tokens      map[string]*TokenInfo // –∫–ª—é—á - –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
	mutex       sync.RWMutex
	authService *AuthIntegration

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
	tokenTTL      time.Duration // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 40 –º–∏–Ω—É—Ç)
	checkCooldown time.Duration // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–Ω—É—Ç–∞)
}

// NewTokenManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤
func NewTokenManager(cfg *config.Config) *TokenManager {
	return &TokenManager{
		config:        cfg,
		httpClient:    client.New(),
		tokens:        make(map[string]*TokenInfo),
		authService:   NewAuthIntegration(cfg),
		tokenTTL:      40 * time.Minute, // –¢–æ–∫–µ–Ω—ã –∂–∏–≤—É—Ç ~45 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
		checkCooldown: 1 * time.Minute,  // –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—â–µ —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É
	}
}

// GetCachedToken –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ API
func (tm *TokenManager) GetCachedToken(accountName string) (string, error) {
	tm.mutex.RLock()
	defer tm.mutex.RUnlock()

	// –ù–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	var account *config.Account
	for _, acc := range tm.config.Accounts {
		if acc.Name == accountName {
			account = &acc
			break
		}
	}

	if account == nil {
		return "", fmt.Errorf("–∞–∫–∫–∞—É–Ω—Ç %s –Ω–µ –Ω–∞–π–¥–µ–Ω", accountName)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
	if tokenInfo, exists := tm.tokens[accountName]; exists {
		// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫ –ø–æ –Ω–∞—à–µ–º—É TTL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
		if time.Now().Before(tokenInfo.ExpiresAt) {
			return tokenInfo.Token, nil
		}
	}

	// –ï—Å–ª–∏ –∫–µ—à–∞ –Ω–µ—Ç –∏–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if account.AuthToken != "" {
		// –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
		tm.tokens[accountName] = &TokenInfo{
			Token:     account.AuthToken,
			ExpiresAt: time.Now().Add(tm.tokenTTL),
			IsValid:   true,
			LastCheck: time.Now(),
		}
		return account.AuthToken, nil
	}

	return "", fmt.Errorf("—Ç–æ–∫–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ %s –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", accountName)
}

// RefreshTokenOnError –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
func (tm *TokenManager) RefreshTokenOnError(accountName string, statusCode int) (string, error) {
	tm.mutex.Lock()
	defer tm.mutex.Unlock()

	log.Printf("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è %s –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ %d", accountName, statusCode)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, –ù–û –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º cooldown –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ —Ç–æ–∫–µ–Ω–∞
	isTokenError := statusCode == 401 || statusCode == 403 || statusCode == 200 // 200 –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å JSON –æ—à–∏–±–∫—É —Ç–æ–∫–µ–Ω–∞
	if tokenInfo, exists := tm.tokens[accountName]; exists && !isTokenError {
		if time.Since(tokenInfo.LastCheck) < tm.checkCooldown {
			log.Printf("‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è %s, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", accountName)
			return tokenInfo.Token, nil
		}
	}

	// –î–ª—è –æ—à–∏–±–æ–∫ —Ç–æ–∫–µ–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å
	if isTokenError {
		log.Printf("üîë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è %s (—Å—Ç–∞—Ç—É—Å %d), –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", accountName, statusCode)
	}

	// –ù–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	var account *config.Account
	var accountIndex int
	for i, acc := range tm.config.Accounts {
		if acc.Name == accountName {
			account = &acc
			accountIndex = i
			break
		}
	}

	if account == nil {
		return "", fmt.Errorf("–∞–∫–∫–∞—É–Ω—Ç %s –Ω–µ –Ω–∞–π–¥–µ–Ω", accountName)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
	log.Printf("üîÑ –ó–∞–ø—É—Å–∫ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è %s...", accountName)
	newToken, err := tm.refreshTokenViaTelegram(account)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è %s: %v", accountName, err)
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
		if account.AuthToken != "" {
			log.Printf("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è %s", accountName)
			return account.AuthToken, nil
		}
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è %s: %v", accountName, err)
	}

	tokenPreview := newToken
	if len(tokenPreview) > 20 {
		tokenPreview = tokenPreview[:20] + "..."
	}
	log.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è %s: %s", accountName, tokenPreview)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ
	if account.AuthToken == newToken {
		log.Printf("‚ö†Ô∏è –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è %s –∏–¥–µ–Ω—Ç–∏—á–µ–Ω —Å—Ç–∞—Ä–æ–º—É! –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π", accountName)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–º/–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º (—Ç–æ–ª—å–∫–æ –¥–ª—è —è–≤–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤)
	if strings.Contains(newToken, "INVALID_TEMP_TOKEN") {
		log.Printf("‚ùå –ü–æ–ª—É—á–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π/–Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è %s: %s", accountName, tokenPreview)
		log.Printf("‚ùå –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –ù–ï –ë–£–î–ï–¢ —Ä–∞–±–æ—Ç–∞—Ç—å —Å API!")
		return "", fmt.Errorf("–ø–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è %s", accountName)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	tm.config.Accounts[accountIndex].AuthToken = newToken

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫)
	go func() {
		if err := tm.config.Save("config.json"); err != nil {
			log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: %v", err)
		}
	}()

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
	tm.tokens[accountName] = &TokenInfo{
		Token:     newToken,
		ExpiresAt: time.Now().Add(tm.tokenTTL),
		IsValid:   true,
		LastCheck: time.Now(),
	}

	log.Printf("‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ %s —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", accountName)
	return newToken, nil
}

// refreshTokenViaTelegram –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
func (tm *TokenManager) refreshTokenViaTelegram(account *config.Account) (string, error) {
	if account.PhoneNumber == "" {
		return "", fmt.Errorf("–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ %s", account.Name)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
	sessionFile := account.SessionFile
	if sessionFile == "" {
		cleanPhone := strings.ReplaceAll(account.PhoneNumber, "+", "")
		sessionFile = fmt.Sprintf("sessions/%s.session", cleanPhone)
	}

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	authService := telegram.NewAuthService(
		tm.config.APIId,
		tm.config.APIHash,
		account.PhoneNumber,
		sessionFile,
		tm.config.BotUsername,
		tm.config.WebAppURL,
		tm.config.TokenAPIURL,
	)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	bearerToken, err := authService.AuthorizeAndGetToken(ctx)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %v", err)
	}

	return bearerToken, nil
}

// PreventiveRefresh –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫—É—Ç
func (tm *TokenManager) PreventiveRefresh() {
	tm.mutex.Lock()
	defer tm.mutex.Unlock()

	log.Printf("üîÑ –ü—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...")

	for accountName, tokenInfo := range tm.tokens {
		// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫—É—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –º–∏–Ω—É—Ç
		if time.Until(tokenInfo.ExpiresAt) < 5*time.Minute {
			log.Printf("‚è∞ –¢–æ–∫–µ–Ω –¥–ª—è %s —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ", accountName)

			// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
			go func(name string) {
				_, err := tm.RefreshTokenOnError(name, 401) // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
				if err != nil {
					log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è %s: %v", name, err)
				}
			}(accountName)
		}
	}
}

// GetValidToken –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
func (tm *TokenManager) GetValidToken(accountName string) (string, error) {
	return tm.GetCachedToken(accountName)
}

// InitializeTokens –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–µ—à —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func (tm *TokenManager) InitializeTokens() {
	tm.mutex.Lock()
	defer tm.mutex.Unlock()

	log.Printf("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞ —Ç–æ–∫–µ–Ω–æ–≤...")

	for _, account := range tm.config.Accounts {
		if account.AuthToken != "" {
			tm.tokens[account.Name] = &TokenInfo{
				Token:     account.AuthToken,
				ExpiresAt: time.Now().Add(tm.tokenTTL),
				IsValid:   true,
				LastCheck: time.Now(),
			}
			log.Printf("üìã –¢–æ–∫–µ–Ω –¥–ª—è %s –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–µ—à", account.Name)
		}
	}
}

// RefreshTokenOnJSONError –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ JSON –æ—à–∏–±–∫–∏ —Ç–æ–∫–µ–Ω–∞
func (tm *TokenManager) RefreshTokenOnJSONError(accountName string) (string, error) {
	log.Printf("üîë –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è %s –∏–∑-–∑–∞ JSON –æ—à–∏–±–∫–∏ —Ç–æ–∫–µ–Ω–∞", accountName)
	return tm.RefreshTokenOnError(accountName, 200) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å 200 –¥–ª—è JSON –æ—à–∏–±–æ–∫
}

// ForceRefreshToken –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫–µ—à –∏ cooldown)
func (tm *TokenManager) ForceRefreshToken(accountName string) (string, error) {
	tm.mutex.Lock()
	defer tm.mutex.Unlock()

	log.Printf("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è %s", accountName)

	// –ù–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	var account *config.Account
	var accountIndex int
	for i, acc := range tm.config.Accounts {
		if acc.Name == accountName {
			account = &acc
			accountIndex = i
			break
		}
	}

	if account == nil {
		return "", fmt.Errorf("–∞–∫–∫–∞—É–Ω—Ç %s –Ω–µ –Ω–∞–π–¥–µ–Ω", accountName)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
	newToken, err := tm.refreshTokenViaTelegram(account)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è %s: %v", accountName, err)
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è %s: %v", accountName, err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	tm.config.Accounts[accountIndex].AuthToken = newToken

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if err := tm.config.Save("config.json"); err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: %v", err)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
	tm.tokens[accountName] = &TokenInfo{
		Token:     newToken,
		ExpiresAt: time.Now().Add(tm.tokenTTL),
		IsValid:   true,
		LastCheck: time.Now(),
	}

	log.Printf("‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ %s –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", accountName)
	return newToken, nil
}

// InvalidateTokenCache –æ—á–∏—â–∞–µ—Ç –∫–µ—à —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
func (tm *TokenManager) InvalidateTokenCache(accountName string) {
	tm.mutex.Lock()
	defer tm.mutex.Unlock()

	delete(tm.tokens, accountName)
	log.Printf("üóëÔ∏è –ö–µ—à —Ç–æ–∫–µ–Ω–∞ –¥–ª—è %s –æ—á–∏—â–µ–Ω", accountName)
}

// ReloadTokenFromConfig –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func (tm *TokenManager) ReloadTokenFromConfig(accountName string) error {
	tm.mutex.Lock()
	defer tm.mutex.Unlock()

	// –ù–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	var account *config.Account
	for _, acc := range tm.config.Accounts {
		if acc.Name == accountName {
			account = &acc
			break
		}
	}

	if account == nil {
		return fmt.Errorf("–∞–∫–∫–∞—É–Ω—Ç %s –Ω–µ –Ω–∞–π–¥–µ–Ω", accountName)
	}

	if account.AuthToken == "" {
		return fmt.Errorf("—Ç–æ–∫–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ %s –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", accountName)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	tm.tokens[accountName] = &TokenInfo{
		Token:     account.AuthToken,
		ExpiresAt: time.Now().Add(tm.tokenTTL),
		IsValid:   true,
		LastCheck: time.Now(),
	}

	log.Printf("üîÑ –¢–æ–∫–µ–Ω –¥–ª—è %s –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", accountName)
	return nil
}
