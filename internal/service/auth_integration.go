package service

import (
	"context"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"

	"stickersbot/internal/config"
	"stickersbot/internal/telegram"
)

// AuthIntegration –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
type AuthIntegration struct {
	config *config.Config
}

// NewAuthIntegration —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
func NewAuthIntegration(cfg *config.Config) *AuthIntegration {
	return &AuthIntegration{config: cfg}
}

// AuthorizeAccounts –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–º —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è
func (ai *AuthIntegration) AuthorizeAccounts(ctx context.Context) error {
	for i, account := range ai.config.Accounts {
		if ai.needsTelegramAuth(account) {
			log.Printf("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: %s", account.Name)

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
			sessionFile := account.SessionFile
			if sessionFile == "" {
				// –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
				cleanPhone := strings.ReplaceAll(account.PhoneNumber, "+", "")
				sessionFile = filepath.Join("sessions", fmt.Sprintf("%s.session", cleanPhone))
			}

			// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
			sessionDir := filepath.Dir(sessionFile)
			if err := os.MkdirAll(sessionDir, 0755); err != nil {
				return fmt.Errorf("—Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π %s: %w", sessionDir, err)
			}

			log.Printf("üìÅ Session —Ñ–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: %s", sessionFile)

			// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –æ–±—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
			authService := telegram.NewAuthService(
				ai.config.APIId,
				ai.config.APIHash,
				account.PhoneNumber,
				sessionFile,
				ai.config.BotUsername,
				ai.config.WebAppURL,
				ai.config.TokenAPIURL,
			)

			// –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
			bearerToken, err := authService.AuthorizeAndGetToken(ctx)
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ %s: %w", account.Name, err)
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
			ai.config.Accounts[i].AuthToken = bearerToken
			log.Printf("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: %s", account.Name)
		} else if account.AuthToken != "" {
			log.Printf("‚úÖ –ê–∫–∫–∞—É–Ω—Ç %s —É–∂–µ –∏–º–µ–µ—Ç Bearer —Ç–æ–∫–µ–Ω", account.Name)
		} else {
			log.Printf("‚ö†Ô∏è  –ê–∫–∫–∞—É–Ω—Ç %s –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", account.Name)
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
	if err := ai.saveConfig(); err != nil {
		log.Printf("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: %v", err)
	}

	return nil
}

// ValidateAccounts –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
func (ai *AuthIntegration) ValidateAccounts() []error {
	var errors []error

	for _, account := range ai.config.Accounts {
		if ai.needsTelegramAuth(account) {
			if ai.config.APIId == 0 {
				errors = append(errors, fmt.Errorf("–∞–∫–∫–∞—É–Ω—Ç %s: api_id –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö", account.Name))
			}

			if ai.config.APIHash == "" {
				errors = append(errors, fmt.Errorf("–∞–∫–∫–∞—É–Ω—Ç %s: api_hash –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö", account.Name))
			}

			if account.PhoneNumber == "" {
				errors = append(errors, fmt.Errorf("–∞–∫–∫–∞—É–Ω—Ç %s: phone_number –Ω–µ —É–∫–∞–∑–∞–Ω", account.Name))
			}
		}
	}

	return errors
}

// hasTelegramAuth –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
func (ai *AuthIntegration) hasTelegramAuth(account config.Account) bool {
	return account.PhoneNumber != "" &&
		ai.config.APIId != 0 &&
		ai.config.APIHash != ""
}

// needsTelegramAuth –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
func (ai *AuthIntegration) needsTelegramAuth(account config.Account) bool {
	return account.AuthToken == "" && ai.hasTelegramAuth(account)
}

// saveConfig —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
func (ai *AuthIntegration) saveConfig() error {
	return ai.config.Save("config.json")
}
