package telegram

import (
	"bufio"
	"context"
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	"stickersbot/internal/client"

	"github.com/gotd/td/session"
	"github.com/gotd/td/telegram"
	"github.com/gotd/td/telegram/auth"
	"github.com/gotd/td/tg"
)

// AuthService —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram
type AuthService struct {
	APIId       int
	APIHash     string
	PhoneNumber string
	SessionFile string
	BotUsername string // Username –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
	WebAppURL   string // URL Web App
	TokenAPIURL string // URL API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Bearer —Ç–æ–∫–µ–Ω–∞
	client      *telegram.Client
}

// NewAuthService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
func NewAuthService(apiId int, apiHash, phoneNumber, sessionFile, botUsername, webAppURL, tokenAPIURL string) *AuthService {
	return &AuthService{
		APIId:       apiId,
		APIHash:     apiHash,
		PhoneNumber: phoneNumber,
		SessionFile: sessionFile,
		BotUsername: botUsername,
		WebAppURL:   webAppURL,
		TokenAPIURL: tokenAPIURL,
	}
}

// AuthorizeAndGetToken –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è –≤ Telegram –∏ –ø–æ–ª—É—á–∞–µ—Ç Bearer —Ç–æ–∫–µ–Ω
func (a *AuthService) AuthorizeAndGetToken(ctx context.Context) (string, error) {
	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞
	sessionStorage := &session.FileStorage{
		Path: a.SessionFile,
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
	a.client = telegram.NewClient(a.APIId, a.APIHash, telegram.Options{
		SessionStorage: sessionStorage,
	})

	var bearerToken string

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
	err := a.client.Run(ctx, func(ctx context.Context) error {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
		status, err := a.client.Auth().Status(ctx)
		if err != nil {
			return fmt.Errorf("–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %w", err)
		}

		if !status.Authorized {
			// –ù—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
			log.Printf("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞: %s", a.PhoneNumber)

			if err := a.performAuth(ctx); err != nil {
				return fmt.Errorf("–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: %w", err)
			}
		} else {
			log.Printf("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞: %s", a.PhoneNumber)
		}

		// –ü–æ–ª—É—á–∞–µ–º Bearer —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
		token, err := a.getBearerToken(ctx)
		if err != nil {
			return fmt.Errorf("–ø–æ–ª—É—á–µ–Ω–∏–µ Bearer —Ç–æ–∫–µ–Ω–∞: %w", err)
		}

		bearerToken = token
		return nil
	})

	if err != nil {
		return "", err
	}

	return bearerToken, nil
}

// performAuth –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
func (a *AuthService) performAuth(ctx context.Context) error {
	flow := auth.NewFlow(
		auth.Constant(
			a.PhoneNumber,
			"", // –ø–∞—Ä–æ–ª—å –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
			auth.CodeAuthenticatorFunc(a.codePrompt),
		),
		auth.SendCodeOptions{},
	)

	return a.client.Auth().IfNecessary(ctx, flow)
}

// codePrompt –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (a *AuthService) codePrompt(ctx context.Context, sentCode *tg.AuthSentCode) (string, error) {
	fmt.Printf("üì± –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä: %s\n", a.PhoneNumber)
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: ")

	reader := bufio.NewReader(os.Stdin)
	code, err := reader.ReadString('\n')
	if err != nil {
		return "", err
	}

	return strings.TrimSpace(code), nil
}

// getBearerToken –ø–æ–ª—É—á–∞–µ—Ç Bearer —Ç–æ–∫–µ–Ω –¥–ª—è Web App
func (a *AuthService) getBearerToken(ctx context.Context) (string, error) {
	api := a.client.API()

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
	self, err := api.UsersGetFullUser(ctx, &tg.InputUserSelf{})
	if err != nil {
		return "", fmt.Errorf("–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: %w", err)
	}

	user := self.Users[0].(*tg.User)
	log.Printf("üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: %s %s (@%s)",
		user.FirstName,
		user.LastName,
		user.Username)

	// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å Bearer —Ç–æ–∫–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	// –≠—Ç–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω
	// –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π Web App –∏–ª–∏ API –±–æ—Ç–∞

	// –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	// –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –∫ API –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	token, err := a.generateBearerToken(ctx, user)
	if err != nil {
		return "", fmt.Errorf("–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Bearer —Ç–æ–∫–µ–Ω–∞: %w", err)
	}

	return token, nil
}

// generateBearerToken –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Bearer —Ç–æ–∫–µ–Ω
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫—É—é –∂–µ –ª–æ–≥–∏–∫—É –∫–∞–∫ –≤ Python –∫–æ–¥–µ
func (a *AuthService) generateBearerToken(ctx context.Context, user *tg.User) (string, error) {
	api := a.client.API()

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	botUsername := a.BotUsername
	webAppURL := a.WebAppURL

	// –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if botUsername == "" {
		botUsername = "stickersbot" // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –±–æ—Ç
	}
	if webAppURL == "" {
		webAppURL = "https://stickers.bot/app" // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
	}

	log.Printf("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç–∞: %s, Web App: %s", botUsername, webAppURL)

	// 1. –ü–æ–ª—É—á–∞–µ–º auth data (–∞–Ω–∞–ª–æ–≥ get_auth_data –∏–∑ Python)
	log.Printf("üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ auth data –¥–ª—è –±–æ—Ç–∞ %s...", botUsername)
	webAppService := NewWebAppService(api, botUsername, webAppURL)
	authResponse, err := webAppService.GetAuthData(ctx, botUsername, webAppURL)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è auth data: %v", err)
		log.Printf("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ fallback —Ç–æ–∫–µ–Ω—É...")
		return a.fallbackToTempToken(user.ID)
	}

	if authResponse.Status != "SUCCESS" {
		log.Printf("‚ùå Auth data –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å: %s", authResponse.Description)
		log.Printf("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ fallback —Ç–æ–∫–µ–Ω—É...")
		return a.fallbackToTempToken(user.ID)
	}

	log.Printf("‚úÖ Auth data —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")

	authData, ok := authResponse.Data.(*client.AuthData)
	if !ok {
		log.Printf("‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç auth data")
		return a.fallbackToTempToken(user.ID)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ auth data –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã
	if !authData.IsValid() {
		log.Printf("‚ö†Ô∏è  Auth data –∏—Å—Ç–µ–∫")
		return a.fallbackToTempToken(user.ID)
	}

	// 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º auth data –Ω–∞ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Bearer —Ç–æ–∫–µ–Ω–∞ (–∞–Ω–∞–ª–æ–≥ auth –∏–∑ Python)
	apiURL := a.TokenAPIURL
	if apiURL == "" {
		apiURL = "https://api.stickerdom.store" // –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API
	}

	log.Printf("üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º API URL: %s", apiURL)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π HTTPClient
	httpClient := client.New()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º auth data –Ω–∞ API
	log.Printf("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ auth data –Ω–∞ API %s...", apiURL)
	tokenResponse, err := httpClient.AuthenticateWithTelegramData(apiURL, authData)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API: %v", err)
		log.Printf("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ fallback —Ç–æ–∫–µ–Ω—É...")
		return a.fallbackToTempToken(user.ID)
	}

	if tokenResponse.Status == "SUCCESS" {
		bearerToken := tokenResponse.Data.(string)
		log.Printf("‚úÖ Bearer —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ API: %s", maskToken(bearerToken))
		return bearerToken, nil
	}

	log.Printf("‚ùå API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: %s", tokenResponse.Description)
	log.Printf("üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ fallback —Ç–æ–∫–µ–Ω—É...")
	return a.fallbackToTempToken(user.ID)
}

// fallbackToTempToken —Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
func (a *AuthService) fallbackToTempToken(userID int64) (string, error) {
	timestamp := time.Now().Unix()
	tempToken := fmt.Sprintf("tg_token_%d_%d", userID, timestamp)

	log.Printf("üé´ –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π Bearer —Ç–æ–∫–µ–Ω: %s", maskToken(tempToken))
	log.Printf("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω!")
	log.Printf("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: bot_username=%s, web_app_url=%s, token_api_url=%s",
		a.BotUsername, a.WebAppURL, a.TokenAPIURL)

	return tempToken, nil
}

// requestTokenFromYourAPI –ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –æ—Ç –≤–∞—à–µ–≥–æ API
func (a *AuthService) requestTokenFromYourAPI(userID int64) (string, error) {
	// –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ –≤–∞—à–µ–º—É API
	// –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Telegram User ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Bearer —Ç–æ–∫–µ–Ω

	// –ü—Ä–∏–º–µ—Ä:
	// client := &http.Client{}
	// req, _ := http.NewRequest("POST", "https://your-api.com/auth/telegram",
	//     strings.NewReader(fmt.Sprintf(`{"telegram_user_id": %d}`, userID)))
	// req.Header.Set("Content-Type", "application/json")
	//
	// resp, err := client.Do(req)
	// if err != nil {
	//     return "", err
	// }
	// defer resp.Body.Close()
	//
	// var result struct {
	//     Token string `json:"token"`
	// }
	// json.NewDecoder(resp.Body).Decode(&result)
	//
	// return result.Token, nil

	return "", fmt.Errorf("–º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω - –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
}
