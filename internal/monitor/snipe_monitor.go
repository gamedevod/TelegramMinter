package monitor

import (
	"context"
	"fmt"
	"log"
	"strings"
	"sync"
	"time"

	"stickersbot/internal/client"
	"stickersbot/internal/config"
)

// PurchaseRequest —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
type PurchaseRequest struct {
	CollectionID int
	CharacterID  int
	Price        int
	Supply       int
	Name         string
}

// PurchaseCallback —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
type PurchaseCallback func(request PurchaseRequest) error

// TokenCallback —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
type TokenCallback func(accountName string) (string, error)

// TokenRefreshCallback —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
type TokenRefreshCallback func(accountName string, statusCode int) (string, error)

// SnipeMonitor —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–Ω–∞–π–ø –º–æ–Ω–∏—Ç–æ—Ä–∞
type SnipeMonitor struct {
	config               *config.Account
	apiClient            *APIClient
	httpClient           *client.HTTPClient
	purchaseCallback     PurchaseCallback
	tokenCallback        TokenCallback
	tokenRefreshCallback TokenRefreshCallback

	// –°–æ—Å—Ç–æ—è–Ω–∏–µ
	knownCollections map[int]bool    // ID –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
	knownCharacters  map[string]bool // "collectionID:characterID" –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
	mutex            sync.RWMutex

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
	ctx    context.Context
	cancel context.CancelFunc

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
	logPrefix        string
	collectionLogger *CollectionLogger
}

// NewSnipeMonitor —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–Ω–∞–π–ø –º–æ–Ω–∏—Ç–æ—Ä
func NewSnipeMonitor(account *config.Account, httpClient *client.HTTPClient, purchaseCallback PurchaseCallback, tokenCallback TokenCallback, tokenRefreshCallback TokenRefreshCallback) *SnipeMonitor {
	ctx, cancel := context.WithCancel(context.Background())

	// –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–π
	logFilename := fmt.Sprintf("found_collections_%s.json", strings.ReplaceAll(account.Name, " ", "_"))

	return &SnipeMonitor{
		config:               account,
		apiClient:            NewAPIClient(httpClient),
		httpClient:           httpClient,
		purchaseCallback:     purchaseCallback,
		tokenCallback:        tokenCallback,
		tokenRefreshCallback: tokenRefreshCallback,
		knownCollections:     make(map[int]bool),
		knownCharacters:      make(map[string]bool),
		ctx:                  ctx,
		cancel:               cancel,
		logPrefix:            fmt.Sprintf("[SNIPE:%s]", account.Name),
		collectionLogger:     NewCollectionLogger(logFilename),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–Ω–∞–π–ø –º–æ–Ω–∏—Ç–æ—Ä
func (s *SnipeMonitor) Start() error {
	if s.config.SnipeMonitor == nil || !s.config.SnipeMonitor.Enabled {
		return fmt.Errorf("—Å–Ω–∞–π–ø\ –º–æ–Ω–∏—Ç–æ—Ä\ –Ω–µ\ –≤–∫–ª—é—á–µ–Ω")
	}

	if s.config.AuthToken == "" {
		return fmt.Errorf("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\ —Ç–æ–∫–µ–Ω\ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
	}

	s.log("üéØ –°–Ω–∞–π–ø –º–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")
	s.log("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
	if s.config.SnipeMonitor.SupplyRange != nil {
		s.log("   Supply: %d - %d", s.config.SnipeMonitor.SupplyRange.Min, s.config.SnipeMonitor.SupplyRange.Max)
	}
	if s.config.SnipeMonitor.PriceRange != nil {
		s.log("   Price: %d - %d –Ω–∞–Ω–æ—Ç–æ–Ω", s.config.SnipeMonitor.PriceRange.Min, s.config.SnipeMonitor.PriceRange.Max)
	}
	if len(s.config.SnipeMonitor.WordFilter) > 0 {
		s.log("   –§–∏–ª—å—Ç—Ä —Å–ª–æ–≤: %v", s.config.SnipeMonitor.WordFilter)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
	if err := s.initializeState(); err != nil {
		s.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	go s.monitorLoop()

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–Ω–∞–π–ø –º–æ–Ω–∏—Ç–æ—Ä
func (s *SnipeMonitor) Stop() {
	s.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–Ω–∞–π–ø –º–æ–Ω–∏—Ç–æ—Ä–∞")
	s.cancel()
}

// initializeState –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
func (s *SnipeMonitor) initializeState() error {
	// –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
	token, err := s.tokenCallback(s.config.Name)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %v", err)
	}

	collections, err := s.apiClient.GetCollections(token)
	if err != nil {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π —Ç–æ–∫–µ–Ω–∞
		if tokenErr, ok := err.(*TokenError); ok {
			s.log("üîë –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %v", tokenErr)
			// –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
			newToken, refreshErr := s.tokenRefreshCallback(s.config.Name, tokenErr.StatusCode)
			if refreshErr != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %v", refreshErr)
			}
			token = newToken // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
			// –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
			collections, err = s.apiClient.GetCollections(newToken)
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %v", err)
			}
		} else {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π: %v", err)
		}
	}

	s.mutex.Lock()
	defer s.mutex.Unlock()

	// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
	for _, collection := range collections.Data {
		s.knownCollections[collection.ID] = true

		// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
		details, err := s.apiClient.GetCollectionDetails(token, collection.ID)
		if err != nil {
			s.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ %d: %v", collection.ID, err)
			continue
		}

		// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
		for _, character := range details.Data.Characters {
			key := fmt.Sprintf("%d:%d", collection.ID, character.ID)
			s.knownCharacters[key] = true
		}
	}

	s.log("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: %d –∫–æ–ª–ª–µ–∫—Ü–∏–π, %d –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π",
		len(s.knownCollections), len(s.knownCharacters))

	return nil
}

// monitorLoop –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func (s *SnipeMonitor) monitorLoop() {
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-s.ctx.Done():
			return
		case <-ticker.C:
			if err := s.checkForNewItems(); err != nil {
				s.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: %v", err)
			}
		}
	}
}

// checkForNewItems –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏
func (s *SnipeMonitor) checkForNewItems() error {
	// –ü–æ–ª—É—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (–±–µ–∑ API –ø—Ä–æ–≤–µ—Ä–∫–∏)
	token, err := s.tokenCallback(s.config.Name)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %v", err)
	}

	collections, err := s.apiClient.GetCollections(token)
	tokenWasRefreshed := false
	if err != nil {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π —Ç–æ–∫–µ–Ω–∞
		if tokenErr, ok := err.(*TokenError); ok {
			s.log("üîë –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: %v", tokenErr)
			// –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
			newToken, refreshErr := s.tokenRefreshCallback(s.config.Name, tokenErr.StatusCode)
			if refreshErr != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %v", refreshErr)
			}
			tokenWasRefreshed = true
			token = newToken // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
			// –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
			collections, err = s.apiClient.GetCollections(newToken)
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %v", err)
			}
		} else {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π: %v", err)
		}
	}

	s.mutex.Lock()
	defer s.mutex.Unlock()

	// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
	if tokenWasRefreshed && len(s.knownCollections) == 0 {
		s.log("üîÑ –¢–æ–∫–µ–Ω –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")

		// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ (–Ω–µ –Ω–æ–≤—ã–µ)
		for _, collection := range collections.Data {
			s.knownCollections[collection.ID] = true

			// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
			details, err := s.apiClient.GetCollectionDetails(token, collection.ID)
			if err != nil {
				s.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ %d –ø—Ä–∏ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %v", collection.ID, err)
				continue
			}

			// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
			for _, character := range details.Data.Characters {
				key := fmt.Sprintf("%d:%d", collection.ID, character.ID)
				s.knownCharacters[key] = true
			}
		}

		s.log("üîÑ –†–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: %d –∫–æ–ª–ª–µ–∫—Ü–∏–π, %d –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ",
			len(s.knownCollections), len(s.knownCharacters))

		// –ü–æ—Å–ª–µ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ
		return nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
	for _, collection := range collections.Data {
		if !s.knownCollections[collection.ID] {
			s.log("üÜï –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: %d - %s", collection.ID, collection.Title)
			s.knownCollections[collection.ID] = true

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º
			if err := s.checkCollection(collection); err != nil {
				s.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ %d: %v", collection.ID, err)
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
		if err := s.checkCollectionForNewCharacters(collection.ID); err != nil {
			s.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ %d: %v", collection.ID, err)
		}
	}

	return nil
}

// checkCollection –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º
func (s *SnipeMonitor) checkCollection(collection Collection) error {
	// –ü–æ–ª—É—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (–±–µ–∑ API –ø—Ä–æ–≤–µ—Ä–∫–∏)
	token, err := s.tokenCallback(s.config.Name)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %v", err)
	}

	details, err := s.apiClient.GetCollectionDetails(token, collection.ID)
	if err != nil {
		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ buyer.go
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–≤–∞–º
	if !s.matchesWordFilter(collection.Title) {
		s.log("üö´ –ö–æ–ª–ª–µ–∫—Ü–∏—è %d –Ω–µ –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–≤–∞–º: %s", collection.ID, collection.Title)
		return nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
	for _, character := range details.Data.Characters {
		key := fmt.Sprintf("%d:%d", collection.ID, character.ID)
		s.knownCharacters[key] = true

		if s.matchesFilters(character) {
			s.log("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂: %s (ID: %d, –¶–µ–Ω–∞: %d, Supply: %d)",
				character.Name, character.ID, character.Price, character.Supply)

			// –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ —Ñ–∞–π–ª
			if err := s.collectionLogger.LogFoundCollection(collection, character, s.config.Name); err != nil {
				s.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –ª–æ–≥: %v", err)
			} else {
				s.log("üíæ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ª–æ–≥ —Ñ–∞–π–ª")
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É
			request := PurchaseRequest{
				CollectionID: collection.ID,
				CharacterID:  character.ID,
				Price:        character.Price,
				Supply:       character.Supply,
				Name:         character.Name,
			}

			if err := s.purchaseCallback(request); err != nil {
				s.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: %v", err)
			}
		}
	}

	return nil
}

// checkCollectionForNewCharacters –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
func (s *SnipeMonitor) checkCollectionForNewCharacters(collectionID int) error {
	// –ü–æ–ª—É—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (–±–µ–∑ API –ø—Ä–æ–≤–µ—Ä–∫–∏)
	token, err := s.tokenCallback(s.config.Name)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: %v", err)
	}

	details, err := s.apiClient.GetCollectionDetails(token, collectionID)
	if err != nil {
		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Ç–æ–∫–µ–Ω –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ buyer.go
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏: %v", err)
	}

	for _, character := range details.Data.Characters {
		key := fmt.Sprintf("%d:%d", collectionID, character.ID)

		if !s.knownCharacters[key] {
			s.log("üÜï –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂: %s –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ %d", character.Name, collectionID)
			s.knownCharacters[key] = true

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–≤–∞–º –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
			if !s.matchesWordFilter(details.Data.Collection.Title) {
				s.log("üö´ –ü–µ—Ä—Å–æ–Ω–∞–∂ %d –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–≤–∞–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏: %s",
					character.ID, details.Data.Collection.Title)
				continue
			}

			if s.matchesFilters(character) {
				s.log("‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂: %s (ID: %d, –¶–µ–Ω–∞: %d, Supply: %d)",
					character.Name, character.ID, character.Price, character.Supply)

				// –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ —Ñ–∞–π–ª
				if err := s.collectionLogger.LogFoundCollection(details.Data.Collection, character, s.config.Name); err != nil {
					s.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –ª–æ–≥: %v", err)
				} else {
					s.log("üíæ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ª–æ–≥ —Ñ–∞–π–ª")
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É
				request := PurchaseRequest{
					CollectionID: collectionID,
					CharacterID:  character.ID,
					Price:        character.Price,
					Supply:       character.Supply,
					Name:         character.Name,
				}

				if err := s.purchaseCallback(request); err != nil {
					s.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: %v", err)
				}
			}
		}
	}

	return nil
}

// matchesWordFilter –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä—É –ø–æ —Å–ª–æ–≤–∞–º
func (s *SnipeMonitor) matchesWordFilter(title string) bool {
	// –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—ë
	if len(s.config.SnipeMonitor.WordFilter) == 0 {
		return true
	}

	titleLower := strings.ToLower(title)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
	for _, word := range s.config.SnipeMonitor.WordFilter {
		if strings.Contains(titleLower, strings.ToLower(word)) {
			return true
		}
	}

	return false
}

// matchesFilters –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤—Å–µ–º —Ñ–∏–ª—å—Ç—Ä–∞–º
func (s *SnipeMonitor) matchesFilters(character Character) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
	if s.config.SnipeMonitor.SupplyRange != nil {
		if character.Supply < s.config.SnipeMonitor.SupplyRange.Min ||
			character.Supply > s.config.SnipeMonitor.SupplyRange.Max {
			s.log("üö´ –ü–µ—Ä—Å–æ–Ω–∞–∂ %s –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä –ø–æ supply: %d (–Ω—É–∂–Ω–æ: %d-%d)",
				character.Name, character.Supply,
				s.config.SnipeMonitor.SupplyRange.Min, s.config.SnipeMonitor.SupplyRange.Max)
			return false
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
	if s.config.SnipeMonitor.PriceRange != nil {
		if character.Price < s.config.SnipeMonitor.PriceRange.Min ||
			character.Price > s.config.SnipeMonitor.PriceRange.Max {
			s.log("üö´ –ü–µ—Ä—Å–æ–Ω–∞–∂ %s –Ω–µ –ø—Ä–æ—à–µ–ª —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ: %d (–Ω—É–∂–Ω–æ: %d-%d)",
				character.Name, character.Price,
				s.config.SnipeMonitor.PriceRange.Min, s.config.SnipeMonitor.PriceRange.Max)
			return false
		}
	}

	return true
}

// log –≤—ã–≤–æ–¥–∏—Ç –ª–æ–≥ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
func (s *SnipeMonitor) log(format string, args ...interface{}) {
	message := fmt.Sprintf(format, args...)
	log.Printf("%s %s", s.logPrefix, message)
}
