package main

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"time"

	"stickersbot/internal/config"
	"stickersbot/internal/service"
)

func main() {
	// –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfgPath := findConfigPath()
	cfg, err := config.Load(cfgPath)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (%s): %v\n", cfgPath, err)
		os.Exit(1)
	}
	fmt.Printf("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: %s\n", cfgPath)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if !cfg.IsValid() {
		fmt.Println("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
		os.Exit(1)
	}

	// –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏
	buyerService := service.NewBuyerService(cfg)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
	if err := buyerService.Start(); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: %v\n", err)
		os.Exit(1)
	}

	fmt.Println("üöÄ –ü–æ–∫—É–ø–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –ª–æ–≥–æ–≤ –≤ stdout
	go func() {
		for log := range buyerService.GetLogChannel() {
			fmt.Println(log)
		}
	}()

	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
	go func() {
		ticker := time.NewTicker(5 * time.Second)
		defer ticker.Stop()
		for range ticker.C {
			stats := buyerService.GetStatistics()
			fmt.Printf("üìà –í—Å–µ–≥–æ: %d | –£—Å–ø–µ—à–Ω–æ: %d | –û—à–∏–±–æ–∫: %d | TON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d | RPS: %.1f | –í—Ä–µ–º—è: %s\n",
				stats.TotalRequests,
				stats.SuccessRequests,
				stats.FailedRequests,
				stats.SentTransactions,
				stats.RequestsPerSec,
				stats.Duration.Truncate(time.Second),
			)
		}
	}()

	// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º Ctrl+C / SIGTERM
	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, os.Interrupt, syscall.SIGTERM)
	<-sigs // –ë–ª–æ–∫–∏—Ä—É–µ–º—Å—è –¥–æ —Å–∏–≥–Ω–∞–ª–∞

	fmt.Println("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
	buyerService.Stop()

	// –î–∞—ë–º –≤–æ—Ä–∫–µ—Ä–∞–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
	time.Sleep(2 * time.Second)

	stats := buyerService.GetStatistics()
	fmt.Printf("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: %d, –£—Å–ø–µ—à–Ω–æ: %d, –û—à–∏–±–æ–∫: %d, TON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d.\n",
		stats.TotalRequests, stats.SuccessRequests, stats.FailedRequests, stats.SentTransactions)
}

// findConfigPath –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
func findConfigPath() string {
	return "./config.json"
}
