package service

import (
	"context"
	"fmt"
	"sync"
	"time"

	"stickersbot/internal/client"
	"stickersbot/internal/config"
	"stickersbot/internal/types"
)

// AccountWorker —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
type AccountWorker struct {
	client   *client.HTTPClient
	account  config.Account
	testMode bool
	testAddr string
	workerID int
}

// BuyerService —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
type BuyerService struct {
	client     *client.HTTPClient
	config     *config.Config
	statistics *types.Statistics
	isRunning  bool
	cancel     context.CancelFunc
	mu         sync.RWMutex
	logChan    chan string
}

// NewBuyerService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏
func NewBuyerService(cfg *config.Config) *BuyerService {
	return &BuyerService{
		client:     client.New(),
		config:     cfg,
		statistics: &types.Statistics{},
		logChan:    make(chan string, 1000),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
func (bs *BuyerService) Start() error {
	bs.mu.Lock()
	defer bs.mu.Unlock()

	if bs.isRunning {
		return fmt.Errorf("—Å–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
	}

	if !bs.config.IsValid() {
		return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã")
	}

	ctx, cancel := context.WithCancel(context.Background())
	bs.cancel = cancel
	bs.isRunning = true

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	bs.statistics = &types.Statistics{
		StartTime: time.Now(),
	}

	bs.logChan <- "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–∫—É–ø–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤..."
	bs.logChan <- fmt.Sprintf("üìä –ê–∫–∫–∞—É–Ω—Ç–æ–≤: %d", len(bs.config.Accounts))

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
	totalThreads := 0
	for _, account := range bs.config.Accounts {
		totalThreads += account.Threads
	}
	bs.logChan <- fmt.Sprintf("üîÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: %d", totalThreads)

	if bs.config.TestMode {
		bs.logChan <- fmt.Sprintf("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ø–ª–∞—Ç–µ–∂–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ %s", bs.config.TestAddress)
	} else {
		bs.logChan <- "‚ö†Ô∏è –ë–û–ï–í–û–ô –†–ï–ñ–ò–ú: –ø–ª–∞—Ç–µ–∂–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ –∞–¥—Ä–µ—Å–∞ –∏–∑ API"
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
	var wg sync.WaitGroup
	workerCounter := 0

	for accountIndex, account := range bs.config.Accounts {
		bs.logChan <- fmt.Sprintf("üéØ –ê–∫–∫–∞—É–Ω—Ç '%s': –ö–æ–ª–ª–µ–∫—Ü–∏—è: %d, –ü–µ—Ä—Å–æ–Ω–∞–∂: %d, –í–∞–ª—é—Ç–∞: %s, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d, –ü–æ—Ç–æ–∫–æ–≤: %d",
			account.Name, account.Collection, account.Character, account.Currency, account.Count, account.Threads)

		if account.SeedPhrase != "" {
			bs.logChan <- fmt.Sprintf("üîê –ê–∫–∫–∞—É–Ω—Ç '%s': TON –∫–æ—à–µ–ª–µ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", account.Name)
		} else {
			bs.logChan <- fmt.Sprintf("‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç '%s': TON –∫–æ—à–µ–ª–µ–∫ –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω", account.Name)
		}

		// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
		for i := 0; i < account.Threads; i++ {
			wg.Add(1)
			workerCounter++

			accountWorker := &AccountWorker{
				client:   client.New(),
				account:  account,
				testMode: bs.config.TestMode,
				testAddr: bs.config.TestAddress,
				workerID: workerCounter,
			}

			go bs.accountWorker(ctx, &wg, accountWorker, accountIndex+1)
		}
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	go bs.updateStatistics(ctx)

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		wg.Wait()
		bs.mu.Lock()
		bs.isRunning = false
		bs.mu.Unlock()
		bs.logChan <- "‚úÖ –í—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
	}()

	return nil
}

// accountWorker –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
func (bs *BuyerService) accountWorker(ctx context.Context, wg *sync.WaitGroup, worker *AccountWorker, accountNum int) {
	defer wg.Done()

	for {
		select {
		case <-ctx.Done():
			bs.logChan <- fmt.Sprintf("üîÑ –ü–æ—Ç–æ–∫ %d (–ê–∫–∫–∞—É–Ω—Ç %d '%s') –∑–∞–≤–µ—Ä—à–µ–Ω", worker.workerID, accountNum, worker.account.Name)
			return
		default:
			bs.performAccountBuy(worker, accountNum)
			time.Sleep(100 * time.Millisecond) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
		}
	}
}

// performAccountBuy –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
func (bs *BuyerService) performAccountBuy(worker *AccountWorker, accountNum int) {
	bs.mu.Lock()
	bs.statistics.TotalRequests++
	bs.mu.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ seed —Ñ—Ä–∞–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
	if worker.account.SeedPhrase != "" {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		resp, err := worker.client.BuyStickersAndPay(
			worker.account.AuthToken,
			worker.account.Collection,
			worker.account.Character,
			worker.account.Currency,
			worker.account.Count,
			worker.account.SeedPhrase,
			worker.testMode,
			worker.testAddr,
		)
		bs.handleAccountResponse(resp, err, worker, accountNum, true)
	} else {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
		resp, err := worker.client.BuyStickers(
			worker.account.AuthToken,
			worker.account.Collection,
			worker.account.Character,
			worker.account.Currency,
			worker.account.Count,
		)
		bs.handleAccountResponse(resp, err, worker, accountNum, false)
	}
}

// handleAccountResponse –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
func (bs *BuyerService) handleAccountResponse(resp *client.BuyStickersResponse, err error, worker *AccountWorker, accountNum int, withTON bool) {
	if err != nil {
		bs.mu.Lock()
		bs.statistics.FailedRequests++
		bs.mu.Unlock()

		bs.logChan <- fmt.Sprintf("‚ùå –ü–æ—Ç–æ–∫ %d (–ê–∫–∫–∞—É–Ω—Ç %d '%s'): –û—à–∏–±–∫–∞ - %v", worker.workerID, accountNum, worker.account.Name, err)
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
	bs.logChan <- fmt.Sprintf("üì° –ü–æ—Ç–æ–∫ %d (–ê–∫–∫–∞—É–Ω—Ç %d '%s'): –°—Ç–∞—Ç—É—Å %d", worker.workerID, accountNum, worker.account.Name, resp.StatusCode)
	bs.logChan <- fmt.Sprintf("üìÑ –ü–æ—Ç–æ–∫ %d (–ê–∫–∫–∞—É–Ω—Ç %d '%s'): –û—Ç–≤–µ—Ç - %s", worker.workerID, accountNum, worker.account.Name, resp.Body)

	if resp.IsTokenError {
		bs.mu.Lock()
		bs.statistics.FailedRequests++
		bs.statistics.InvalidTokens++
		bs.mu.Unlock()

		bs.logChan <- fmt.Sprintf("üîë –ü–æ—Ç–æ–∫ %d (–ê–∫–∫–∞—É–Ω—Ç %d '%s'): –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!", worker.workerID, accountNum, worker.account.Name)
		return
	}

	if !resp.Success {
		bs.mu.Lock()
		bs.statistics.FailedRequests++
		bs.mu.Unlock()

		bs.logChan <- fmt.Sprintf("‚ö†Ô∏è –ü–æ—Ç–æ–∫ %d (–ê–∫–∫–∞—É–Ω—Ç %d '%s'): –ù–µ—É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å (—Å—Ç–∞—Ç—É—Å %d)", worker.workerID, accountNum, worker.account.Name, resp.StatusCode)
	} else {
		bs.mu.Lock()
		bs.statistics.SuccessRequests++
		if withTON && resp.OrderID != "" {
			bs.statistics.SentTransactions++
		}
		bs.mu.Unlock()

		if withTON && resp.OrderID != "" {
			bs.logChan <- fmt.Sprintf("‚úÖ –ü–æ—Ç–æ–∫ %d (–ê–∫–∫–∞—É–Ω—Ç %d '%s'): –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ TON! OrderID: %s, –°—É–º–º–∞: %.9f TON, –ö–æ—à–µ–ª–µ–∫: %s",
				worker.workerID, accountNum, worker.account.Name, resp.OrderID, float64(resp.TotalAmount)/1000000000, resp.Wallet)
		} else {
			bs.logChan <- fmt.Sprintf("‚úÖ –ü–æ—Ç–æ–∫ %d (–ê–∫–∫–∞—É–Ω—Ç %d '%s'): –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å!", worker.workerID, accountNum, worker.account.Name)
		}
	}
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏
func (bs *BuyerService) Stop() {
	bs.mu.Lock()
	defer bs.mu.Unlock()

	if !bs.isRunning {
		return
	}

	if bs.cancel != nil {
		bs.cancel()
	}
	bs.logChan <- "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤..."
}

// IsRunning –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞
func (bs *BuyerService) IsRunning() bool {
	bs.mu.RLock()
	defer bs.mu.RUnlock()
	return bs.isRunning
}

// GetStatistics –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (bs *BuyerService) GetStatistics() *types.Statistics {
	bs.mu.RLock()
	defer bs.mu.RUnlock()

	// –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	stats := *bs.statistics
	if bs.isRunning {
		stats.Duration = time.Since(stats.StartTime)
		if stats.Duration.Seconds() > 0 {
			stats.RequestsPerSec = float64(stats.TotalRequests) / stats.Duration.Seconds()
		}
	}
	return &stats
}

// GetLogChannel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
func (bs *BuyerService) GetLogChannel() <-chan string {
	return bs.logChan
}

// updateStatistics –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
func (bs *BuyerService) updateStatistics(ctx context.Context) {
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return
		case <-ticker.C:
			stats := bs.GetStatistics()
			bs.logChan <- fmt.Sprintf("üìà –í—Å–µ–≥–æ: %d | –£—Å–ø–µ—à–Ω–æ: %d | –û—à–∏–±–æ–∫: %d | InvalidTokens: %d | TON –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d | RPS: %.1f | –í—Ä–µ–º—è: %s",
				stats.TotalRequests,
				stats.SuccessRequests,
				stats.FailedRequests,
				stats.InvalidTokens,
				stats.SentTransactions,
				stats.RequestsPerSec,
				stats.Duration.Truncate(time.Second),
			)
		}
	}
}
