package service

import (
	"context"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"

	"stickersbot/internal/config"
	"stickersbot/internal/telegram"
)

// AuthIntegration –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
type AuthIntegration struct {
	config *config.Config
}

// NewAuthIntegration —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
func NewAuthIntegration(cfg *config.Config) *AuthIntegration {
	return &AuthIntegration{config: cfg}
}

// AuthorizeAccounts –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
func (ai *AuthIntegration) AuthorizeAccounts(ctx context.Context) error {
	for i, account := range ai.config.Accounts {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
		if ai.shouldUseTelegramAuth(&account) {
			fmt.Printf("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: %s\n", account.Name)

			token, err := ai.authorizeAccount(ctx, &account)
			if err != nil {
				return fmt.Errorf("–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ %s: %w", account.Name, err)
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
			ai.config.Accounts[i].AuthToken = token
			fmt.Printf("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: %s\n", account.Name)
		}
	}

	return nil
}

// shouldUseTelegramAuth –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
func (ai *AuthIntegration) shouldUseTelegramAuth(account *config.Account) bool {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏:
	// 1. –£–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	// 2. –£–∫–∞–∑–∞–Ω—ã API credentials
	// 3. –ù–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ auth_token –∏–ª–∏ –æ–Ω —É—Å—Ç–∞—Ä–µ–ª
	return account.PhoneNumber != "" &&
		account.APIId != 0 &&
		account.APIHash != "" &&
		(account.AuthToken == "" || ai.isTokenExpired(account.AuthToken))
}

// isTokenExpired –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
func (ai *AuthIntegration) isTokenExpired(token string) bool {
	// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç timestamp, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
	if strings.Contains(token, "tg_token_") {
		// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
		return false // –ø–æ–∫–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –Ω–µ –∏—Å—Ç–µ–∫–∞—é—Ç
	}
	return false
}

// authorizeAccount –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
func (ai *AuthIntegration) authorizeAccount(ctx context.Context, account *config.Account) (string, error) {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
	sessionFile := account.SessionFile
	if sessionFile == "" {
		// –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
		cleanPhone := strings.ReplaceAll(account.PhoneNumber, "+", "")
		sessionFile = filepath.Join("sessions", fmt.Sprintf("%s.session", cleanPhone))
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
	sessionDir := filepath.Dir(sessionFile)
	if err := os.MkdirAll(sessionDir, 0755); err != nil {
		return "", fmt.Errorf("—Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–π %s: %w", sessionDir, err)
	}

	log.Printf("üìÅ Session —Ñ–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: %s", sessionFile)

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	authService := telegram.NewAuthService(
		account.APIId,
		account.APIHash,
		account.PhoneNumber,
		sessionFile,
		account.BotUsername,
		account.WebAppURL,
		account.TokenAPIURL,
	)

	// –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
	ctx, cancel := context.WithTimeout(ctx, 5*time.Minute) // —Ç–∞–π–º–∞—É—Ç –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
	defer cancel()

	token, err := authService.AuthorizeAndGetToken(ctx)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %w", err)
	}

	return token, nil
}

// ValidateAccounts –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
func (ai *AuthIntegration) ValidateAccounts() []error {
	var errors []error

	for _, account := range ai.config.Accounts {
		if ai.shouldUseTelegramAuth(&account) {
			if account.PhoneNumber == "" {
				errors = append(errors, fmt.Errorf("–∞–∫–∫–∞—É–Ω—Ç %s: –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", account.Name))
			}

			if account.APIId == 0 {
				errors = append(errors, fmt.Errorf("–∞–∫–∫–∞—É–Ω—Ç %s: –Ω–µ —É–∫–∞–∑–∞–Ω API ID", account.Name))
			}

			if account.APIHash == "" {
				errors = append(errors, fmt.Errorf("–∞–∫–∫–∞—É–Ω—Ç %s: –Ω–µ —É–∫–∞–∑–∞–Ω API Hash", account.Name))
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
			if !strings.HasPrefix(account.PhoneNumber, "+") {
				errors = append(errors, fmt.Errorf("–∞–∫–∫–∞—É–Ω—Ç %s: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +", account.Name))
			}
		}
	}

	return errors
}
